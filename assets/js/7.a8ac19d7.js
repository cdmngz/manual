(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{361:function(a,s,e){"use strict";e.r(s);var t=e(42),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"primeros-pasos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#primeros-pasos"}},[a._v("#")]),a._v(" Primeros pasos")]),a._v(" "),e("p",[a._v("Esta sección busca explicar de manera simple, por lo tanto escapando algunos detalles técnicos, para dejar tu computadora lista para empezar a trabajar en un proyecto.")]),a._v(" "),e("h2",{attrs:{id:"preparando-entorno-de-trabajo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#preparando-entorno-de-trabajo"}},[a._v("#")]),a._v(" Preparando entorno de trabajo")]),a._v(" "),e("p",[a._v("Más allá de los permisos de accesos y cuentas mails que se deben habilitar en el proceso. Se puede ir realizando la configuración del entorno de trabajo, instalar las herramientas necesarias, realizar algunas pruebas y tener todo preparado para ese momento.")]),a._v(" "),e("h3",{attrs:{id:"instalar-gnu-linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instalar-gnu-linux"}},[a._v("#")]),a._v(" Instalar GNU/Linux")]),a._v(" "),e("p",[a._v("Para este proyecto procederemos a preparar nuestro entorno bajo un SO GNU/Linux, lo haremos partiendo desde una laptop con SO Windows.")]),a._v(" "),e("h3",{attrs:{id:"crear-particion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#crear-particion"}},[a._v("#")]),a._v(" Crear Partición")]),a._v(" "),e("p",[a._v('Por lo general trea una herramienta llamada "Crear Partición", desde inicio-buscar la podremos conseguir, una vez encontrada la abrimos, nos aparece nuestro disco con sus distintas particiones, la idea es asignar una parte grande a un espacio vacío para ahí instalar GNU/Linux. Le damos a crear partición, con una de 100GB es suficiente.')]),a._v(" "),e("h3",{attrs:{id:"usb-ejecutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usb-ejecutable"}},[a._v("#")]),a._v(" USB ejecutable")]),a._v(" "),e("p",[a._v("Procedemos a descargarnos alguna imagen GNU/Linux (Debian, Ubuntu, etc...).")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://neon.kde.org/download",target:"_blank",rel:"noopener noreferrer"}},[a._v("Descargar SO KDE Neon for Developers"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("Ahora descargamos rufus, app para montar la imagen .iso en el USB y volverlo booteable.")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://rufus.ie/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Descargar rufus"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"instalar-so"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instalar-so"}},[a._v("#")]),a._v(" Instalar SO")]),a._v(" "),e("p",[a._v("Reiniciamos la compu.\nPor lo general con f2, f8 entramos al menú de booteo donde configuramos que el equipo inicie leyendo el PenDrive antes que el Disco.\nLe damos a instalar SO, preferiblemente con cable ethernet conectado.\nSeleccionamos idioma, zona horaria, teclado.\nEn la partición creada desde Windows procedemos a instalar el SO, por lo general se crean 3 particiones dentro de la vacía:")]),a._v(" "),e("ul",[e("li",[a._v('Una de 1GB para el "área de intercambio".')]),a._v(" "),e("li",[a._v('Otra de 20GB para los archivos de sistema ("/", ext4).')]),a._v(" "),e("li",[a._v('El resto para los archivos del usuario ("/home", ext4).\nSe deben ver las 3 nuevas que creamos. Siguiente.\nLe asignamos el nombre a la compu, usario y clave.\nAl finalinalizar te pedirá que saques el pendrive y se reiniciará.')])]),a._v(" "),e("h2",{attrs:{id:"instalar-python"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instalar-python"}},[a._v("#")]),a._v(" Instalar Python")]),a._v(" "),e("p",[a._v("Para poder desplegar varias funciones de google cloud y ejecutar el backend, tendremos que bajarnos python2:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" add-apt-repository universe\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" update\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" python2\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" https://bootstrap.pypa.io/get-pip.py --output get-pip.py\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" python2 get-pip.py\npip2 --version\n")])])]),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Hay que instalarlo")]),a._v(" "),e("p",[a._v("Así podremos ejecutar el nuevo fga-cli")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" remove docker docker-engine docker.io containerd runc\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("     apt-transport-https     ca-certificates     "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v("     gnupg-agent     software-properties-common\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -fsSL https://download.docker.com/linux/ubuntu/gpg "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" apt-key "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" -\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" apt-key fingerprint 0EBFCD88\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" docker.io\n")])])]),e("h2",{attrs:{id:"crear-archivo-de-alias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#crear-archivo-de-alias"}},[a._v("#")]),a._v(" Crear archivo de alias")]),a._v(" "),e("p",[a._v("Para crear un archivo de alias con los comandos que más vamos a utilizar y si te acostumbras me lo agradecerás. Nos vamos a la carpeta raíz:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n")])])]),e("p",[a._v("Creamos o abrimos el archivo de los alias con vim y los especifiquemos:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" .bash_aliases\n")])])]),e("p",[a._v("Con la letra i podemos escribir, con ESC dejamos de escribir y :wq + Enter podemos guardar y salir, salir forzado es :q!")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("upg")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sudo apt-get update && sudo apt-get upgrade"')]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("db_proxy")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"cloud_sql_proxy -instances={proyecto}:{server}:{user}=tcp:{puerto}"')]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("proyecto")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"cd ~/ruta/proyecto"')]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("deploy")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fga-cli deploy app --env=dev -- --promote -q"')]),a._v("\n")])])]),e("h2",{attrs:{id:"git-deploy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-deploy"}},[a._v("#")]),a._v(" Git & Deploy")]),a._v(" "),e("h3",{attrs:{id:"deploy-en-dev"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploy-en-dev"}},[a._v("#")]),a._v(" Deploy en dev")]),a._v(" "),e("p",[a._v("Creamos una rama a partir de master, por lo general comienza con dev, luego el cuarto del año en curso y un nombre (dev-Q4-informes)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout -b dev-Q4-informes\n")])])]),e("p",[a._v("Verificamos que estamos en la rama creada, la dev, aquí es donde hago mis modificaciones.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch\n")])])]),e("p",[a._v("Verifico si tengo archivos por commitear en mi árbol local.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" status\n")])])]),e("p",[a._v("Si los hay pues los levanto a mi espacio de trabajo local. El punto hace referencia a todos los modificados.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("p",[a._v("Hago el commit a mi repositorio local, le coloco un mensaje conciso.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),a._v("\n")])])]),e("p",[a._v("Me voy ahora a la rama master y comienzo la magia de los merge. Esto siguiendo la recete confiable de don Froyd.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master \n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout dev-Q4-avaya \n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master \n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge dev-Q4-avaya \nfga-cli run\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push\nfga-cli deploy app --env"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev -- --promote -q\n")])])]),e("h2",{attrs:{id:"back-local-a-bd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#back-local-a-bd"}},[a._v("#")]),a._v(" Back local a BD")]),a._v(" "),e("p",[a._v("Don Froyd creó una apires flask, para que con el siguiente proxy, nos podamos conectar a la BD de manera local y podamos probar funciones back.")]),a._v(" "),e("p",[a._v('Recomendamos fuertemente que el comando  "db_proxy" lo agregues a tu lista de '),e("a",{attrs:{href:"#crear-archivo-de-alias"}},[a._v("alias")]),a._v(" en tu computadora")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl stop mysql.service   "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Sólo si el puerto 3306 está ocupado sin necesidad")]),a._v("\n./restart.sh                        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Se corre la primera vez, para todas las instalaciones")]),a._v("\ndb_proxy\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/env/bin/activate\npython runner.py\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);